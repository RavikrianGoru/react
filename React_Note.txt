React:

* React.js (or simply React ) is an open source javascript library developed by facebook.
* it is widly used for building UI based web applications
* it allows to create reusable UI components and efficiently updates & render those components when the underlying data changes

+ Virtual DOM---------		
					  |----Single Page Applications
+ Components----------		



1) install node: https://nodejs.org/en/download
1) install VS code studio
2) check node and npm versions
	>node -v
	>npm -v

Legacy way of creation react application:
	1) Create react application using commands
	   >npx create-react-app myfirstreact
	   >cd myfirstreact
	   >npm start---------> once application start it opens localhost:3000

	   
Understand the project structure:	   
1) Open myfirstreact in VS code studio
   >cd myfirstreact
   > code .
   Above command will open the code in VS code IDE.
2) MYFIRSTREACT
		node_modules---------------------like target with dependencies .m2 folder
		public
		src
		.gitignore
		 package-lock.json
		 package.json--------------------like pom.xml
		 README.md
=======================================================

Components:
----------
In React, there are primarily two types of components: Class components and Function components. With the introduction of React Hooks, function components have become the more commonly used type, but class components are still used in many legacy codebases

	Components are building blocks in UI
	Types:
		1) Functional Components(Latest)
		2) Class Components(Old versions)

Create Components

	1) Create file( use jsx extention): filename start with Capital letter
	2) create functional or class componetn
	3) export the components
	4) import this component in another component

* install 'Simple React Snippets' or any other extentions in VS code
ShortCut:rfce --> React Functional Component Export


Nested Compopent:
	create folder: example
	create file :Sample.jsx
		type rfce--> will generate sample code.
	create arrow function in the same component
		const Mango = () => {
		    return (
        			<h2>Mangos are sweet</h2>
    			)
		}

* Any content return from function/component must be within <div>...</div>

CSS react
--------
	CSS file and Modules
	create .css file and just import in your .jsx file.
	CSS Implementation
	CSS Frameworks
		Material UI, Chakra UI, React Bootstrap, Gromment, React Redux, React Router, Blueprint UI, Fluent UI, Semantic UI React, React Admin.

JSX: Javascript XML
	Clear Boiler Plate
	What is JSX
		Earlier html tags in .html file and javascript code in .js file
		Javascript XML, allows to write html and js code in .jsx file. 
	JSX Rules
		Component must start with Capital letter.
		all element must be in some parent element like <div>, <section>,...etc.
	Dynamic data
		dynamic data can be passed through {}
		let a='Banana';

		<div>
			<h1> I like {a}</h1>
		</div>
Elements
	What are Elements
		<div className="container">
			<p className="para"> this is paragraph</p>
		</div>	
	How to create Elements
	Element Rules
	Element Styling

Images
	local and internet Images
	<img src="https://m.media-amazon.com/images/I/61+6tqsjzDL._AC_UF1000,1000_QL80_.jpg" alt="Check net connection" />
    <img className="profile" src="pics/ravi.jpg" alt="local path issue" />

Props
	Props/Properties(read only)	intercomponent communication 

						Date(communication 1-way)
	Component1(Parent)--------------------------->Component2(Child)

ShortCut: rafc--> React Arrow Functional Component 


Prop Destructuring
	1) Passing userdefined object to child component from parent component
	const carData = {
    	model: "Maruti",
    	year: 2012,
    	dealer: "XYZ Dealer",
    	color: "red"
	}
	 <CarDetails car={carData} />
	2) Child component extract as individual fields and can use directly.
		const { model, year, dealer, color } = props.car;

State Management:
	I) useState Hook: hooks are functions are available in Function Components only. N/A in class Components.

	Syntax: 
		const [state,setState]=useState()
	Example 
		const[city,setCity]=useState("Hyderabad");
	
	1) import useState
	2) syntax useState be used in function at top level.
	3) When we try to change the state by using setCity("Delhi"): it will go to infinate loop.
		We have to use setCity(-) in conditions
		If we try to add mulitple condition the we will get error.
		We have to use effective Hook condition.
		
	II) useEffect Hook
	useEffect it manages the side effects (Allows subscriptions)
	
	Syntax:
		useEffect(()=>{},[])
	Explination useEffect with paranthesis and has one callback function ()=>{}, and dependency []

	1) import useState and useEffect
	2) syntax useState be used in function at top level.
	3) setting state multiple time must be used in condition and condition must be used in useEffect's callback function
	4) we can pass state in dependency, the state will be monitored and updated in DOM.
	const [city,setCity]=useState("Hyd");

	useEffect(
		()=>{
		if(city==="Hyd")
		{
			setCity("H");
		}else{
			setCity("not H");
		}

	},[city]);

Ternary Operator: same like if-else statement but in one line.
	Condition = True / False	
	Syntax:
		Condition?True:False
	Example:
		const[someCondition,SetSomeCondition]=useState[true];
		someCondition?"I am 1st Statement true":"I am 2nd statement false";


Events:
	1) Mouse Events
		click
		dblclick(Double Click)
		mouseover
		mouseout
		mouseenter
		mouseleave
		mousedown
		mouseup
	2) Keyboard Events
		keydown
		keyup
		keypress
	3) Form Events
		submit
		reset
		focus
		blur 
		change
		input

EventListeners

Form events:
	get input values
	controlled
	forms vs inputs
	form events

* 	Form submit will clear the screen while reloading.
*   use preventDefult() in calling form submit related method to hold data while screen reloading.

NPM: npmjs.com
	npm stands for Node Package Manager. It is a package manager for JavaScript and is the default package manager for the JavaScript runtime environment Node.js.
	1. Pakage Management
	2. Command-Line Tool
	3. npm Registry
	4. Version controlled

Ref: npmjs.com	
install react-toastify
1. search : react-toastify
2. open terminal: npm i react-toastify


Array
	uses, how to use in react.

	1) Create array
	let numbs = [1, 3, 5, 8, 9, 2];
	let sampleArry = [1, 'ravi', 35.6, { name: "Raj" }];
	let players = [
	    {
	        name: "ravi",
	        age: 35
	    },
	    {
	        name: "Raj",
	        age: 32
	    }
	];
	2) use
			index 0: {numbs[0]}
            
			index 3 as object: {sampleArry[3].name}

            {
                players.map((item) => {
                    return (
                        <div>
                            Players name: {item.name} <br />
                            Players age: {item.age}
                        </div>
                    )
                })
            };

Neasted Object in array:
	open and collecte json dta gtom json placeholder site. Ref: https://jsonplaceholder.typicode.com/


Template Strings/Literals: can be used with backtick `
	consta name="ravi";
	{`Hello!, Good Morning! ${name}`}

Fetch Data drom API and Error handling:
	realtime data can be consumed through rest API. 
	we use fetch() method to get data from backend or service.

	Get API:
	-------
		const userGetApi = "https://jsonplaceholder.typicode.com/posts";

		const [userData, setUserData] = useState([]);

    	const getApiCall = async (getAPI) => {
    	    console.log("API :", getAPI);
    	    const response = await fetch(getAPI);
    	    const jsonData = await response.json();
    	    setUserData(jsonData);
    	    //return jsonData;
   		}

		useEffect(() => {
       	 	console.log(getApiCall(userGetApi));
    	}, []);

	Post API:
	--------
		const empPostApi = "http://localhost:8080/emp";

    	const [name, setName] = useState("");
    	const [role, setRole] = useState("");
    	const [email, setEmail] = useState("");
    	const [dep, setDep] = useState("");

    	//fetch response, error
    	const [data, setData] = useState(null);
    	const [error, setError] = useState(null);

    	//console.log(name, role, email, dep);

    	const empObj = { name, role, email, dep };

	
		const postEmpDetails = async (e) => {
    	    e.preventDefault();
    	    console.log("Employee details:", empObj);

    	    try {
    	        //Calling post API
    	        const response = await fetch(
    	            empPostApi,
    	            {
    	                method: "POST",
    	                headers: { "Content-Type": "Application/json" },
    	                body: JSON.stringify(empObj)
    	            }
    	        );
    	        // Check if the response is not OK (status code 4xx/5xx)
    	        if (!response.ok) {
    	            throw new Error(`HTTP error! Status: ${response.status}`);
    	        }

    	        // Parse the JSON response
    	        const result = await response.json();
    	        setData(result); // Handle the response data
    	        console.log("result:", result);
    	    } catch (error) {
    	        // Catch and handle network errors or any other exceptions
    	        setError(error.message);
    	        console.error('Error during fetch request:', error);
    	    }
    	}
Conditional Rendering:
	In React, {condition && <element />} is a shorthand for rendering the <element /> only if the condition is true (or truthy). If the condition is false (or falsy), nothing is rendered.		

	Ex:
		{error && <p style={{ color: 'red' }}>Error: {error}</p>}

DOM vs Virtual DOM:
------------------

1. DOM(Document Object Model) :The DOM is the representation of the web page that browsers use. It's a hierarchical structure of HTML elements, which can be modified by JavaScript to dynamically update the content of a web page.
When you interact with a webpage (for example, clicking a button or entering text), the browser manipulates the DOM to reflect those changes on the page. Each time something changes in the DOM, the browser has to repaint and reflow the page, which can be expensive in terms of performance, especially for large and complex web applications.

2. Virtual DOM:
The Virtual DOM is a lightweight copy of the actual DOM in memory. Instead of directly modifying the real DOM, React creates a virtual representation of it, which allows it to make more efficient updates. The virtual DOM improves performance because:


Short Circuit Evaluation(&&): same as condition rendering.
------------------------


Spred Operator: (...)
--------------
const one=["A","B"];
const two=["C","D"];
const three=["E","F"];

const four=[...one, ...two, ...three];


const obj1={a:1,b:2};
const obj2={c:3,d:4};

const objs={...obj1, ...obj2};


userReducer Hook:
================ used to manage multiple states.

State menagement:
	1. useState Hook
	2. useReducer Hook
	3. Redux (External library)

useReducer: 
	API Call:
		1. Loading
		2. API response(success)
		3. Error
	syntax:
		const[state, dispath]=useReduce(function,initialState);


React + Vite:
============
Latest way to install React through react.dev site.
Ref: https://react.dev/learn

1) Create a react project using Vite. Ref: https://vite.dev/guide/
	Open cmd prompt:
		> npm create vite@latest
			project: reavt1_vite
			framework: React
			variant: javascript
		> cd reavt1_vite
		> npm install
		> npm run dev
	Remove upwanted files,css,code.


React Router DOM:
================
One of the way to linnk multiple pages in site.
Open https://www.npmjs.com/
Search :react-router-dom

	1. Install React Router DOM
		> npm install react-router-dom
		or 
		> npm i react-router-dom

	2. Wrap App in BrowserRouter
		Open main component (main.jsx)
		import BrowserRouter and wrpa App component within BrowserRouter tags.
		create a few components like LeftCard,RightCard,MiddleCard,BottomCard 
	3. Define Route in Routes as below. so, we can access the links like http://localhost:5173/leftcard
	<Routes>
        <Route path='/leftcard' element={<LeftCard />} />
        <Route path='/rightcard' element={<RightCard />} />
        <Route path='/middlecard' element={<MiddleCard />} />
        <Route path='/bottomcard' element={<BottomCard />} />
      </Routes>

	Open App component and import Routes component

	4. Link Elements
	Create NacCard and like below
			<ul>
                <Link to='/leftcard'><li>Left</li></Link>
                <Link to='/rightcard'><li>Right</li></Link>
                <Link to='/middlecard'><li>Middle</li></Link>
                <Link to='/bottomcard'><li>Bottom</li></Link>
            </ul >

useContext Hook
===============
	1. Create Context
	2. Provider Function
	3. Custom Component
	4. Custom Hook